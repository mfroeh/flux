class Point { x: i64; y: i64;
    distance(p: Point): i64 {
        let dx = p.x - *this.x;
        let dy = p.y - *this.y;
        ret dx * dx + dy * dy;
    }
}

class Rectangle {
    topleft: Point;
    bottomright: Point;

    height() : i64 {
        ret *this.bottomright.y - *this.topleft.y;
    }

    width() : i64 => *this.bottomright.x - *this.topleft.x;

    area() => *this.height() * *this.width();

    contains(p: Point*): bool {
        ret *p.x >= *this.topleft.x && *p.x <= *this.bottomright.x &&
            *p.y >= *this.topleft.y && *p.y <= *this.bottomright.y;
    }
}

main(): i64 {
    let rect: Rectangle = Rectangle {
        topleft: Point { x: -10, y: -10},
        bottomright: Point { x: 10, y: 10 }
    };
    let height = rect.height();
    let width = rect.width();
    let area = rect.area();
    let p: Point = Point { x: 0, y: 0 };
    let contains = rect.contains(&p);

    let pointDist = rect.topleft.distance(rect.bottomright);

    let arr: i64[5] = [55, 55];
    let ptrs = [&(rect.topleft), &(rect.bottomright)];
    /* ret *(ptrs[1]).x; */
    let ptrs: Rectangle*[1] = [&rect];
    ret *(ptrs[0]).height();
    /* ret height * width == area ? 37 : 73; */
}