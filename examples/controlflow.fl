add(a: f64, b: f64) => -b;

main(): i64 {
    let a: bool = false;
    let b = main();
    let c = add(1, 2.2);
    
    // bodied if-elif-else
    if (a) {
        ret 1;
    } elif (b) {
        ret 2;
    } else {
        ret 3;
    }

    // single-statement if-elif-else (note the difference in the arrow syntax: -> instead of =>)
    // -> indicates that a statement follows, => demands that an expression follows
    if (a) -> ret 1;
    elif (b) -> ret 2;
    else -> ret 3;

    // combined (ugly but up to you)
    if (a) {
        ret 1;
    } elif (b) {
        ret 2;
    } else -> ret 3;

    // bodied while loop
    let i: i64 = 0;
    while (i < 10) {
        i += 1;
    } 
    
    {
        let j: i64 = 0;
        while (j < 10) {
            j += 1;
            i += j;
        }
    }

    // single-statement while loop
    // while (i < 20) -> i += 1;

    // bodied for-loop
    for (let i: f64 = 0; i in [0, 100]; i = 1;) {
        i *= 2;
    }

    // single-statement for loop
    for (let i: i64 = 0; i in [0, 100]; i += 1;) -> i *= 2;

    ret 1;
}