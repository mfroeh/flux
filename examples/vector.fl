class Vec {
    data: i64[1]*;
    size: i64;
    capacity: i64;

    get(index: i64): i64 {
        ret (*this->data)[index];
    }

    getPtr(index: i64): i64* {
        ret &(*this->data)[index];
    }

    add(val: i64): void {
        if (this->size == this->capacity) {
            this->capacity *= 2;
            let newData = halloc i64[1](this->capacity);
            for (let i = 0; i in [0, this->size); i += 1;) -> (*newData)[i] = (*this->data)[i];
            this->data = newData;
        }
        let elemRef = this->getPtr(this->size);
        *elemRef = val;
        this->size += 1;
        ret;
    }

}

makeVec(capacity: i64): Vec {
    ret Vec { data: halloc i64[1](capacity), size: 0, capacity: capacity };
}

main(): i64 {
    let v = makeVec(10);
    for (let i = 0; i < 10000; i += 1;) -> v.add(i * i);
    ret v.get(9999);
}